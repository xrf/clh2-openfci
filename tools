#!/bin/sh
set -e

download_tool=
download() {
    if [ $# -ne 1 ]
    then
        echo >&2 'download: expected one argument'
        return 1
    fi

    # figure out which tool we should use to download files
    [ "$download_tool" ] || {
        if command >/dev/null 2>&1 -v curl
        then
            download_tool=curl
        elif command >/dev/null 2>&1 -v wget
        then
            download_tool=wget
        else
            download_tool=none
        fi
    }

    # call the download tool
    case $download_tool in
        curl) curl -fsLS    -- "$1";;
        wget) wget -nv -O - -- "$1";;
        *)    echo >&2 'download: either `curl` or `wget` must be installed'
              return 1;;
    esac
}

# arguments:
#
#   - 1:  working directory
#   - 2:  name of the destination directory
#   - 3:  username
#   - 4:  name of the project
#   - 5:  tag of the release
#
unpack_src_gh() {
    mkdir -p "${1:-.}"
    cd "${1:-.}"
    download "https://github.com/$3/$4/archive/$5.tar.gz" | \
        gunzip | tar xf -
    rm -fr "$2"
    mv "$4-$5" "$2"
    touch "$2.ok"
}

get_coulomb_ho2d() {
    unpack_src_gh "$1" coulomb_ho2d xrf coulomb_ho2d 2.0.0
}

get_openfci() {
    unpack_src_gh "$1" openfci xrf simen-openfci 0.6.2
}

get_lpp() {
    url='http://sourceforge.net/projects/lpp/files/lpp/lpp-0.2.b/lpp.0.2.b.tgz'
    mkdir -p "${1:-.}/lpp"
    cd "${1:-.}/lpp"
    download "$url" | gunzip | tar xf - lpp
    touch "../lpp.ok"
}
